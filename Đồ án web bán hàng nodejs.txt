//----------------------------------------------------Phan Tài Đức----------------------------------------------------
Web bán hàng gồm các chức năng:
-Đăng ký, đăng nhập, quên mật khẩu, active tài khoản
-Sản phẩm, giỏ hàng
-Đơn hàng
-Hóa đơn
-Khuyến mãi
-Đánh giá
//------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------ĐĂNG KÝ TÀI KHOẢN--------------------------
exports.register = asyncMiddleware(async (req, res, next) => {
  const { email, name, password } = req.body;
  const newUser = new User({ email, name, password });
  const saved_user = await newUser.save();
  res.status(201).json(new SuccessResponse(201, saved_user));
});
//------------------------------------------------------------------------------
//--------------------------ĐĂNG NHẬP--------------------------
exports.login = asyncMiddleware(async (req, res, next) => {
  const { email, password } = req.body;
  const isExistEmail = await User.findOne({ email });
  if (isExistEmail) {
    const isMatchPassword = await User.comparePassword(
      password,
      isExistEmail.password
    );
    if (isMatchPassword) {
      const token = jwt.sign(
        {
          name: isExistEmail.name,
          email: isExistEmail.email,
          role: isExistEmail.role,
        },
        process.env.JWT_KEY
      );
      return res.status(200).json(new SuccessResponse(200, token));
    } else return next(new ErrorResponse(400, "Password is incorrect!"));
  } else return next(new ErrorResponse(404, "Email is not found"));
});
//------------------------------------------------------------------------------
//--------------------------QUÊN MẬT KHẨU--------------------------
exports.forgetPass = asyncMiddleware(async (req, res, next) => {
  const { email } = req.body;
  const isExistEmail = await User.findOne({ email });
  if (isExistEmail) {
    const option = {
      service: "gmail",
      auth: {
        user: "duc.phan622@gmail.com", // email hoặc username
        pass: "*********", // password
      },
    };
    const transporter = nodemailer.createTransport(option);
    //random mật khẩu từ trên 6 chữ số
    const pass = (Math.floor(Math.random() * 1000000) + 100000).toString();
    const mail = {
      from: "duc.phan622@gmail.com", // Địa chỉ email của người gửi
      to: `${email}`, //email user
      subject: "Thay đổi mật khẩu", // Tiêu đề mail
      text: `Mật khẩu mới của bạn:${pass} `, // Nội dung mail dạng text
      html: `<h1>Mật khẩu mới của bạn:${pass}</h1>`, // Nội dung mail dạng html
    };
    //Tiến hành gửi email
    transporter.sendMail(mail, function (error, info) {
      if (error) {
        // nếu có lỗi
        console.log(error);
      } else {
        //nếu thành công
        console.log("Email sent: " + info.response);
      }
    });
    //cập nhật mật khẩu user by email
    console.log(req.body);
    const updateUser = await User.findOneAndUpdate(
      { email: email },
      { password: pass },
      {
        new: true,
      }
    );
    if (!updateUser) return next(new ErrorResponse(400, "can not update"));
    res.status(200).json(new SuccessResponse(200, updateUser));
  }
});
//------------------------------------------------------------------------------
//--------------------------ACTIVE--------------------------
//mặc định isActive = false, user có role = admin có quyền active user khác
//thay đổi isActive dựa vào email
exports.activeUserByEmail = asyncMiddleware(async (req, res, next) => {
  const { email } = req.body;
  const updateUser = await User.updateOne(
    { email: email },
    { isActive: true },
    {
      new: true,
    }
  );
  if (!updateUser) return next(new ErrorResponse(400, "can not update"));
  res.status(200).json(new SuccessResponse(200, updateUser));
});
//------------------------------------------------------------------------------
//--------------------------SẢN PHẨM--------------------------
//name,price,sku,quantity,description,category,image
//lấy toàn bộ sản phẩm
exports.getAllProducts = asyncMiddleware(async (req, res, next) => {
  const products = await Product.find().populate("category_detail");
  res.status(200).json(new SuccessResponse(200, products));
});
//thêm sản phẩm
exports.createNewProduct = asyncMiddleware(async (req, res, next) => {
  const { name, price, sku, quantity, description, category } = req.body;
  const newProduct = new Product({
    name,
    price,
    sku,
    quantity,
    description,
    category,
    image: req.file.filename,
  });
  const product = await newProduct.save();
  res.status(201).json(new SuccessResponse(201, product));
});
//xóa sản phẩm theo id
exports.deleteProductById = asyncMiddleware(async (req, res, next) => {
  const { productId } = req.params;
  const doc = await Product.findByIdAndDelete(productId);
  if (!doc) {
    return next(new ErrorResponse(404, "Product is not found"));
  }
  res
    .status(200)
    .json(new SuccessResponse(200, `product has id ${productId} was deleted`));
});
//lấy sản phẩm theo id
exports.getProductById = asyncMiddleware(async (req, res, next) => {
  const { productId } = req.params;
  const doc = await Product.find({productId:productId});
  if (!doc) {
    return next(new ErrorResponse(404, "Product is not found"));
  }
  res.status(200).json(new SuccessResponse(200, doc));
});
//------------------------------------------------------------------------------
//--------------------------GIỎ HÀNG--------------------------
//id người mua, id sản phẩm, giá tiền,số lượng
//thêm sản phẩm vào giỏ hàng
exports.addItemCart = asyncMiddleware(async (req, res, next) => {
  const { idUser, idProduct, price, count } = req.body;
  const newCart = new Cart({ idUser, idProduct, price, count });
  const cart = await newCart.save();
  res.status(201).json(new SuccessResponse(201, cart));
});
//lấy danh sách sản phẩm trong giỏ hàng theo id user
exports.getCartByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.body;
  const cart = await Cart.find({ idUser: idUser }).catch(
    (err) => new ErrorResponse(404, cart is not found")
  );
  if (cart) res.status(200).json(new SuccessResponse(200, cart));
});
//tính tổng thành tiền theo id user
exports.getTotalCountByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.body;
  const cart = await Cart.find({ idUser: idUser }).catch(
    (err) => new ErrorResponse(404, cart is not found")
  );
  let sum = 0;
  cart.forEach((e) => {
    sum += e.price * e.count;
  });
  if (cart) res.status(200).json(new SuccessResponse(200, sum));
});
//cập nhật cart theo id user
exports.updateCartByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));
  const updateCart = await Cart.findOneAndUpdate({ idUser: idUser }, req.body, {
    new: true,
  });
  if (!updateCart) return next(new ErrorResponse(400, "can not update"));
  res.status(200).json(new SuccessResponse(200, updateCart));
});
//xóa cart theo id user
exports.deleteCartByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));
  const deleteCart = await Cart.findOneAndDelete({idUser:idUser});
  if (!deleteCart) return next(new ErrorResponse(400, "can not delete"));
  res.status(200).json(new SuccessResponse(200));
});
//------------------------------------------------------------------------------
//--------------------------ĐƠN HÀNG--------------------------
//id người mua, số tiền
//thêm đơn hàng
exports.addDonHang = asyncMiddleware(async (req, res, next) => {
  const { idUser, soTien } = req.body;
  const newDonHang = new DonHang({ idUser, soTien });
  const donHang = await newDonHang.save();
  res.status(201).json(new SuccessResponse(201, donHang));
});
//lấy đơn hàng theo id người mua
exports.getDonHangByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  const doc = await DonHang.find({ idUser: idUser });
  if (!doc) {
    return next(new ErrorResponse(404, "Don hang is not found"));
  }
  res.status(200).json(new SuccessResponse(200, doc));
});
//lấy toàn bộ đơn hàng
exports.getAllDonHang = asyncMiddleware(async (req, res, next) => {
  const donHang = await DonHang.find();
  res.status(200).json(new SuccessResponse(200, donHang));
});
//cập nhật đon hàng theo id user
exports.updateDonHangByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));
  const updateDonHang = await DonHang.findOneAndUpdate(
    { idUser: idUser },
    req.body,
    {
      new: true,
    }
  );
  if (!updateDonHang) return next(new ErrorResponse(400, "can not update"));
  res.status(200).json(new SuccessResponse(200, updateDonHang));
});
//xóa đơn hàng theo id user
exports.deleteDonHangByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));
  const deleteDonHang = await Cart.findOneAndDelete({idUser:idUser});
  if (!deleteDonHang) return next(new ErrorResponse(400, "can not delete"));
  res.status(200).json(new SuccessResponse(200));
});
//------------------------------------------------------------------------------
// --------------------------HÓA ĐƠN--------------------------
//id người mua, id sản phẩm, giá tiền, số lượng
//thêm hóa đơn
exports.addHoaDon = asyncMiddleware(async (req, res, next) => {
  const { idUser, idProduct, giaTien, soLuong } = req.body;
  const newHoaDon = new HoaDon({ idUser, idProduct, giaTien, soLuong });
  const hoaDon = await newHoaDon.save();
  res.status(201).json(new SuccessResponse(201, hoaDon));
});
//lấy khuyến mãi theo id người mua
exports.getHoaDonByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  const doc = await HoaDon.find({ idUser: idUser });
  if (!doc) {
    return next(new ErrorResponse(404, "Hoa don is not found"));
  }
  res.status(200).json(new SuccessResponse(200, doc));
});
//lấy toàn bộ hóa dơn
exports.getAllHoaDon = asyncMiddleware(async (req, res, next) => {
  const hoaDon = await HoaDon.find();
  res.status(200).json(new SuccessResponse(200, hoaDon));
});
//cập nhật hóa đơn theo id user
exports.updateHoaDonByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));

  const updateHoaDon = await HoaDon.findOneAndUpdate(
    { idUser: idUser },
    req.body,
    {
      new: true,
    }
  );
  if (!updateHoaDon) return next(new ErrorResponse(400, "can not update"));
  res.status(200).json(new SuccessResponse(200, updateHoaDon));
});
//xóa hóa đơn theo id user
exports.deleteHoaDonByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idUser } = req.params;
  if (!idUser.trim()) return next(new ErrorResponse(400, "idUser is empty"));
  const deleteHoaDon = await HoaDon.findOneAndDelete({idUser:idUser});
  if (!deleteHoaDon) return next(new ErrorResponse(400, "can not delete"));
  res.status(200).json(new SuccessResponse(200));
});

//------------------------------------------------------------------------------
//--------------------------KHUYẾN MÃI--------------------------
//id sản phẩm, giá khuyến mãi
//thêm khuyến mãi
exports.addKhuyenMai = asyncMiddleware(async (req, res, next) => {
  const { idProduct, promotionalPrice } = req.body;
  const newKhuyenMai = new KhuyenMai({ idProduct, promotionalPrice });
  const khuyenMai = await newKhuyenMai.save();
  res.status(201).json(new SuccessResponse(201, khuyenMai));
});
//lấy khuyến mãi theo id sản phẩm
exports.getKhuyenMaiByIdProduct = asyncMiddleware(async (req, res, next) => {
  const { idProduct } = req.params;
  const doc = await KhuyenMai.find({ idProduct: idProduct });
  if (!doc) {
    return next(new ErrorResponse(404, "Khuyen mai is not found"));
  }
  res.status(200).json(new SuccessResponse(200, doc));
});
//lấy toàn bộ khuyến mãi
exports.getAllKhuyenMai = asyncMiddleware(async (req, res, next) => {
  const khuyenMai = await KhuyenMai.find();
  res.status(200).json(new SuccessResponse(200, khuyenMai));
});
//cập nhật khuyến mãi theo id sản phẩm
exports.updateKhuyenMaiByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idProduct } = req.params;
  if (!idProduct.trim())
    return next(new ErrorResponse(400, "idProduct is empty"));
  const updateKhuyenMai = await KhuyenMai.findOneAndUpdate(
    { idProduct: idProduct },
    req.body,
    {
      new: true,
    }
  );
  if (!updateKhuyenMai) return next(new ErrorResponse(400, "can not update"));
  res.status(200).json(new SuccessResponse(200, updateKhuyenMai));
});
//xóa khuyến mãi theo id sản phẩm
exports.deleteKhuyenMaiByIdUser = asyncMiddleware(async (req, res, next) => {
  const { idProduct } = req.params;
  if (!idProduct.trim())
    return next(new ErrorResponse(400, "idProduct is empty"));
  const deleteKhuyenMai = await KhuyenMai.findOneAndDelete({idProduct:idProduct});
  if (!deleteKhuyenMai) return next(new ErrorResponse(400, "can not delete"));
  res.status(200).json(new SuccessResponse(200));
});

//------------------------------------------------------------------------------
//--------------------------ĐÁNH GIÁ--------------------------
//id người mua, id sản phẩm, đánh giá, số sao
//thêm đánh giá
exports.addDanhGia = asyncMiddleware(async (req, res, next) => {
  const { idUser, idProduct, danhGia, star } = req.body;
  const newDanhGia = new DanhGia({ idUser, idProduct, danhGia, star });
  const danhGia = await newDanhGia.save();
  res.status(201).json(new SuccessResponse(201, danhGia));
});
//lấy đánh giá theo id user và id sản phẩm
exports.getDanhGiaByIdUserAndIdProduct = asyncMiddleware(
  async (req, res, next) => {
    const { idUser, idProduct } = req.body;
    const doc = await DanhGia.find({ idUser: idUser, idProduct: idProduct });
    if (!doc) {
      return next(new ErrorResponse(404, "Danh gia is not found"));
    }
    res.status(200).json(new SuccessResponse(200, doc));
  }
);
//cập nhật khuyến mãi theo  id user và id sản phẩm
exports.updateDanhGiaByIdUserAndIdProduct = asyncMiddleware(
  async (req, res, next) => {
    const { idUser, idProduct } = req.body;
    if (!idProduct.trim() || !idUser.trim())
      return next(new ErrorResponse(400, "idProduct or idUser is empty"));
    const updateKhuyenMai = await KhuyenMai.findOneAndUpdate(
      { idUser: idUser, idProduct: idProduct },
      req.body,
      {
        new: true,
      }
    );
    if (!updateKhuyenMai) return next(new ErrorResponse(400, "can not update"));
    res.status(200).json(new SuccessResponse(200, updateKhuyenMai));
  }
);
//xóa khuyến mãi theo id user và id sản phẩm
exports.deleteKhuyenMaiByIdUserAndIdProduct = asyncMiddleware(
  async (req, res, next) => {
    const { idUser, idProduct } = req.body;
    if (!idProduct.trim() || !idUser.trim())
      return next(new ErrorResponse(400, "idProduct or idUser is empty"));
    const deleteKhuyenMai = await KhuyenMai.findOneAndDelete({
      idUser: idUser,
      idProduct: idProduct,
    });
    if (!deleteKhuyenMai) return next(new ErrorResponse(400, "can not delete"));
    res.status(200).json(new SuccessResponse(200));
  }
);


